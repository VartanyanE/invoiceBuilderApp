[{"C:\\Users\\varta\\Desktop\\projects\\invoiceBuilder\\client\\src\\index.js":"1","C:\\Users\\varta\\Desktop\\projects\\invoiceBuilder\\client\\src\\App.js":"2","C:\\Users\\varta\\Desktop\\projects\\invoiceBuilder\\client\\src\\context\\UserContext.js":"3","C:\\Users\\varta\\Desktop\\projects\\invoiceBuilder\\client\\src\\components\\pages\\Invoice.js":"4","C:\\Users\\varta\\Desktop\\projects\\invoiceBuilder\\client\\src\\components\\auth\\Login.js":"5","C:\\Users\\varta\\Desktop\\projects\\invoiceBuilder\\client\\src\\components\\auth\\Register.js":"6","C:\\Users\\varta\\Desktop\\projects\\invoiceBuilder\\client\\src\\components\\pages\\Home.js":"7","C:\\Users\\varta\\Desktop\\projects\\invoiceBuilder\\client\\src\\utils\\API.js":"8","C:\\Users\\varta\\Desktop\\projects\\invoiceBuilder\\client\\src\\components\\auth\\AuthOptions.js":"9","C:\\Users\\varta\\Desktop\\projects\\invoiceBuilder\\client\\src\\components\\grids\\Grids.js":"10"},{"size":207,"mtime":1610087587793,"results":"11","hashOfConfig":"12"},{"size":1740,"mtime":1611118225697,"results":"13","hashOfConfig":"12"},{"size":79,"mtime":1610087587792,"results":"14","hashOfConfig":"12"},{"size":6214,"mtime":1611040206011,"results":"15","hashOfConfig":"12"},{"size":1364,"mtime":1610087587790,"results":"16","hashOfConfig":"12"},{"size":1964,"mtime":1610087587791,"results":"17","hashOfConfig":"12"},{"size":218,"mtime":1611117709894,"results":"18","hashOfConfig":"12"},{"size":954,"mtime":1610945757132,"results":"19","hashOfConfig":"12"},{"size":1017,"mtime":1611117709892,"results":"20","hashOfConfig":"12"},{"size":1192,"mtime":1611121936708,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"37j8zr",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\varta\\Desktop\\projects\\invoiceBuilder\\client\\src\\index.js",[],["45","46"],"C:\\Users\\varta\\Desktop\\projects\\invoiceBuilder\\client\\src\\App.js",["47"],"C:\\Users\\varta\\Desktop\\projects\\invoiceBuilder\\client\\src\\context\\UserContext.js",[],"C:\\Users\\varta\\Desktop\\projects\\invoiceBuilder\\client\\src\\components\\pages\\Invoice.js",["48"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n  createInvoice,\r\n  getInvoice,\r\n  searchInvoice,\r\n  isPastDue,\r\n} from \"../../utils/API\";\r\nimport UserContext from \"../../context/UserContext\";\r\nimport { saveAs } from \"file-saver\";\r\nimport FileBase from \"react-file-base64\";\r\nimport moment from \"moment\";\r\nimport { set } from \"mongoose\";\r\n\r\nexport default function Invoice() {\r\n  const { userData } = useContext(UserContext);\r\n  const [currentId, setCurrentId] = useState();\r\n  const [data, setData] = useState([{}]);\r\n  const [invoice, setInvoice] = useState([{}]);\r\n  const [search, setSearch] = useState({\r\n    invoiceNumber: \"\",\r\n  });\r\n  const [searchResultsState, setSearchResultsState] = useState([{}]);\r\n\r\n  useEffect(() => {\r\n    getInvoice().then((res) => {\r\n      setInvoice(res.data);\r\n      console.log(res.data);\r\n    });\r\n  }, [data]);\r\n\r\n  function getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n  }\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const invoiceDueDate = moment().add(data.paymentTerms, \"days\");\r\n    let taxConversion = data.tax / 100;\r\n    console.log(taxConversion);\r\n    let totalPrice = (data.quantity || data.hours) * data.rate;\r\n    let taxTotal = taxConversion * totalPrice;\r\n    let finalTotal = totalPrice + taxTotal;\r\n    console.log(finalTotal);\r\n\r\n    let randomInvoiceNumber = getRandomInt(9999, 100000);\r\n    await createInvoice({\r\n      invoiceNumber: randomInvoiceNumber,\r\n      name: data.name,\r\n      dueDate: invoiceDueDate,\r\n      tax: data.tax,\r\n      paymentTerms: data.paymentTerms,\r\n      pastDue: false,\r\n\r\n      description: data.description,\r\n      hours: data.hours,\r\n      quantity: data.quantity,\r\n      rate: data.rate,\r\n      total: finalTotal,\r\n\r\n      selectedFile: data.selectedFile,\r\n      creator: userData.user.id,\r\n    });\r\n    await clearForm();\r\n  };\r\n\r\n  const handlePastDue = async (event) => {\r\n    event.preventDefault();\r\n\r\n    await searchInvoice(search.invoiceNumber).then(({ data }) => {\r\n      setSearchResultsState(data);\r\n      setCurrentId(searchResultsState[0]._id);\r\n      let currentDate = moment();\r\n      let dueDate = searchResultsState[0].dueDate;\r\n      console.log(dueDate);\r\n      if (currentDate.isAfter(dueDate)) {\r\n        isPastDue(currentId);\r\n      }\r\n    });\r\n  };\r\n\r\n  const clearForm = () => {\r\n    setData({\r\n      name: \"\",\r\n      quantity: \"\",\r\n      tax: \"\",\r\n      description: \"\",\r\n      hours: \"\",\r\n      rate: \"\",\r\n    });\r\n  };\r\n\r\n  const downloadPDF = async () => {\r\n    console.log(invoice);\r\n    let invoiceObject = {\r\n      invoiceNumber: invoice[0].invoiceNumber,\r\n      name: invoice[0].name,\r\n      dueDate: invoice[0].dueDate,\r\n      description: invoice[0].description,\r\n      hours: invoice[0].hours,\r\n      rate: invoice[0].rate,\r\n      total: invoice[0].total,\r\n      tax: invoice[0].tax,\r\n      selectedFile: invoice[0].selectedFile,\r\n    };\r\n    console.log(invoiceObject);\r\n    await axios\r\n      .post(\"/create-pdf\", invoiceObject)\r\n      .then(() => axios.get(\"/create-pdf/fetch-pdf\", { responseType: \"blob\" }))\r\n      .then((res) => {\r\n        const pdfBlob = new Blob([res.data], { type: \"application/pdf\" });\r\n\r\n        saveAs(pdfBlob, \"newPdf.pdf\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>Name</label>\r\n        <input\r\n          value={data.name}\r\n          onChange={(e) => setData({ ...data, name: e.target.value })}\r\n        />\r\n        <br />\r\n        <label>Description</label>\r\n        <input\r\n          value={data.description}\r\n          onChange={(e) => setData({ ...data, description: e.target.value })}\r\n        />\r\n        <br />\r\n        <label>Hours</label>\r\n        <input\r\n          value={data.hours}\r\n          onChange={(e) => setData({ ...data, hours: e.target.value })}\r\n        />\r\n        <br />\r\n        <label>Quantity</label>\r\n        <input\r\n          value={data.quantity}\r\n          onChange={(e) => setData({ ...data, quantity: e.target.value })}\r\n        />\r\n        <br />\r\n        <label>Tax</label>\r\n        <input\r\n          placeholder=\"%\"\r\n          value={data.tax}\r\n          onChange={(e) => setData({ ...data, tax: e.target.value })}\r\n        />\r\n        <br />\r\n        <label>Payment Terms</label>\r\n        <input\r\n          value={data.paymentTerms}\r\n          onChange={(e) => setData({ ...data, paymentTerms: e.target.value })}\r\n        />\r\n        <br />\r\n        <label>Rate</label>\r\n        <input\r\n          value={data.rate}\r\n          onChange={(e) => setData({ ...data, rate: e.target.value })}\r\n        />{\" \"}\r\n        <br />\r\n        Upload a logo{\" \"}\r\n        <FileBase\r\n          id=\"upload logo\"\r\n          type=\"file\"\r\n          multiple={false}\r\n          onDone={({ base64 }) => setData({ ...data, selectedFile: base64 })}\r\n        />{\" \"}\r\n        <br />\r\n        <button type=\"submit\">Submit Data</button>\r\n        <br />\r\n      </form>\r\n      <button onClick={downloadPDF}>Download PDF</button>\r\n      <div>\r\n        <form>\r\n          <input\r\n            placeholder=\"Enter Invoice Number\"\r\n            value={search.invoiceNumber}\r\n            onChange={(e) => {\r\n              setSearch({ ...search, invoiceNumber: e.target.value });\r\n            }}\r\n          />\r\n          <button onClick={handlePastDue}>Search</button>\r\n        </form>\r\n      </div>\r\n\r\n      <div>\r\n        {searchResultsState\r\n          ? searchResultsState.map((results) => (\r\n            \r\n              <h2 key={results._id}>\r\n                Invoice Number: {results.invoiceNumber} <br />\r\n                Company Name: {results.name}\r\n                <br />\r\n                Description: {results.description}\r\n                <br />\r\n                Hours: {results.hours}\r\n                <br />\r\n                Rate: {results.rate}\r\n                <br />\r\n                Total: {results.total}\r\n                <br />\r\n                Status: {results.pastDue ? \"Past Due!\" : \"Current\"}\r\n              </h2>\r\n            \r\n            ))\r\n          : \"\"}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\varta\\Desktop\\projects\\invoiceBuilder\\client\\src\\components\\auth\\Login.js",[],"C:\\Users\\varta\\Desktop\\projects\\invoiceBuilder\\client\\src\\components\\auth\\Register.js",[],"C:\\Users\\varta\\Desktop\\projects\\invoiceBuilder\\client\\src\\components\\pages\\Home.js",[],"C:\\Users\\varta\\Desktop\\projects\\invoiceBuilder\\client\\src\\utils\\API.js",[],"C:\\Users\\varta\\Desktop\\projects\\invoiceBuilder\\client\\src\\components\\auth\\AuthOptions.js",["49"],"import React, { Component, useContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport UserContext from \"../../context/UserContext\";\r\nimport \"./Auth.css\";\r\n\r\nexport default function AuthOptions() {\r\n  const history = useHistory();\r\n\r\n  const { userData, setUserData } = useContext(UserContext);\r\n\r\n  const register = () => history.push(\"/register\");\r\n  const login = () => history.push(\"/login\");\r\n  const createInvoice = () => history.push(\"/invoice\");\r\n  const logout = () => {\r\n    setUserData({\r\n      token: undefined,\r\n      user: undefined,\r\n    });\r\n    localStorage.setItem(\"auth-token\", \"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"\">\r\n      {userData.user ? (\r\n        <>\r\n          <button onClick={createInvoice}>Create Invoice</button>\r\n          <button onClick={logout}>Logout</button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <button onClick={register}>REGISTER </button>\r\n          <button onClick={login}>LOGIN </button>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\varta\\Desktop\\projects\\invoiceBuilder\\client\\src\\components\\grids\\Grids.js",[],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":3,"column":8,"nodeType":"56","messageId":"57","endLine":3,"endColumn":12},{"ruleId":"54","severity":1,"message":"58","line":13,"column":10,"nodeType":"56","messageId":"57","endLine":13,"endColumn":13},{"ruleId":"54","severity":1,"message":"59","line":1,"column":17,"nodeType":"56","messageId":"57","endLine":1,"endColumn":26},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-unused-vars","'Home' is defined but never used.","Identifier","unusedVar","'set' is defined but never used.","'Component' is defined but never used.","no-global-assign","no-unsafe-negation"]