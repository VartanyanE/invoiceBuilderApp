[{"C:\\Users\\varta\\Desktop\\projects\\invoiceBuilderApp\\client\\src\\index.js":"1","C:\\Users\\varta\\Desktop\\projects\\invoiceBuilderApp\\client\\src\\App.js":"2","C:\\Users\\varta\\Desktop\\projects\\invoiceBuilderApp\\client\\src\\context\\UserContext.js":"3","C:\\Users\\varta\\Desktop\\projects\\invoiceBuilderApp\\client\\src\\components\\pages\\Invoice.js":"4","C:\\Users\\varta\\Desktop\\projects\\invoiceBuilderApp\\client\\src\\components\\grids\\Grids.js":"5","C:\\Users\\varta\\Desktop\\projects\\invoiceBuilderApp\\client\\src\\components\\auth\\Login.js":"6","C:\\Users\\varta\\Desktop\\projects\\invoiceBuilderApp\\client\\src\\components\\pages\\Home.js":"7","C:\\Users\\varta\\Desktop\\projects\\invoiceBuilderApp\\client\\src\\components\\auth\\Register.js":"8","C:\\Users\\varta\\Desktop\\projects\\invoiceBuilderApp\\client\\src\\utils\\API.js":"9","C:\\Users\\varta\\Desktop\\projects\\invoiceBuilderApp\\client\\src\\context\\ClickedContext.js":"10"},{"size":207,"mtime":1610086952646,"results":"11","hashOfConfig":"12"},{"size":1998,"mtime":1611287869185,"results":"13","hashOfConfig":"12"},{"size":79,"mtime":1610083866280,"results":"14","hashOfConfig":"12"},{"size":6214,"mtime":1611088943138,"results":"15","hashOfConfig":"12"},{"size":1192,"mtime":1611128616943,"results":"16","hashOfConfig":"12"},{"size":5284,"mtime":1611291471606,"results":"17","hashOfConfig":"12"},{"size":4770,"mtime":1611277113690,"results":"18","hashOfConfig":"12"},{"size":6992,"mtime":1611277113689,"results":"19","hashOfConfig":"12"},{"size":1040,"mtime":1611202600124,"results":"20","hashOfConfig":"12"},{"size":79,"mtime":1611286921156,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2yd177",{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\varta\\Desktop\\projects\\invoiceBuilderApp\\client\\src\\index.js",[],"C:\\Users\\varta\\Desktop\\projects\\invoiceBuilderApp\\client\\src\\App.js",["45","46"],"C:\\Users\\varta\\Desktop\\projects\\invoiceBuilderApp\\client\\src\\context\\UserContext.js",[],["47","48"],"C:\\Users\\varta\\Desktop\\projects\\invoiceBuilderApp\\client\\src\\components\\pages\\Invoice.js",["49"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n  createInvoice,\r\n  getInvoice,\r\n  searchInvoice,\r\n  isPastDue,\r\n} from \"../../utils/API\";\r\nimport UserContext from \"../../context/UserContext\";\r\nimport { saveAs } from \"file-saver\";\r\nimport FileBase from \"react-file-base64\";\r\nimport moment from \"moment\";\r\nimport { set } from \"mongoose\";\r\n\r\nexport default function Invoice() {\r\n  const { userData } = useContext(UserContext);\r\n  const [currentId, setCurrentId] = useState();\r\n  const [data, setData] = useState([{}]);\r\n  const [invoice, setInvoice] = useState([{}]);\r\n  const [search, setSearch] = useState({\r\n    invoiceNumber: \"\",\r\n  });\r\n  const [searchResultsState, setSearchResultsState] = useState([{}]);\r\n\r\n  useEffect(() => {\r\n    getInvoice().then((res) => {\r\n      setInvoice(res.data);\r\n      console.log(res.data);\r\n    });\r\n  }, [data]);\r\n\r\n  function getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n  }\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const invoiceDueDate = moment().add(data.paymentTerms, \"days\");\r\n    let taxConversion = data.tax / 100;\r\n    console.log(taxConversion);\r\n    let totalPrice = (data.quantity || data.hours) * data.rate;\r\n    let taxTotal = taxConversion * totalPrice;\r\n    let finalTotal = totalPrice + taxTotal;\r\n    console.log(finalTotal);\r\n\r\n    let randomInvoiceNumber = getRandomInt(9999, 100000);\r\n    await createInvoice({\r\n      invoiceNumber: randomInvoiceNumber,\r\n      name: data.name,\r\n      dueDate: invoiceDueDate,\r\n      tax: data.tax,\r\n      paymentTerms: data.paymentTerms,\r\n      pastDue: false,\r\n\r\n      description: data.description,\r\n      hours: data.hours,\r\n      quantity: data.quantity,\r\n      rate: data.rate,\r\n      total: finalTotal,\r\n\r\n      selectedFile: data.selectedFile,\r\n      creator: userData.user.id,\r\n    });\r\n    await clearForm();\r\n  };\r\n\r\n  const handlePastDue = async (event) => {\r\n    event.preventDefault();\r\n\r\n    await searchInvoice(search.invoiceNumber).then(({ data }) => {\r\n      setSearchResultsState(data);\r\n      setCurrentId(searchResultsState[0]._id);\r\n      let currentDate = moment();\r\n      let dueDate = searchResultsState[0].dueDate;\r\n      console.log(dueDate);\r\n      if (currentDate.isAfter(dueDate)) {\r\n        isPastDue(currentId);\r\n      }\r\n    });\r\n  };\r\n\r\n  const clearForm = () => {\r\n    setData({\r\n      name: \"\",\r\n      quantity: \"\",\r\n      tax: \"\",\r\n      description: \"\",\r\n      hours: \"\",\r\n      rate: \"\",\r\n    });\r\n  };\r\n\r\n  const downloadPDF = async () => {\r\n    console.log(invoice);\r\n    let invoiceObject = {\r\n      invoiceNumber: invoice[0].invoiceNumber,\r\n      name: invoice[0].name,\r\n      dueDate: invoice[0].dueDate,\r\n      description: invoice[0].description,\r\n      hours: invoice[0].hours,\r\n      rate: invoice[0].rate,\r\n      total: invoice[0].total,\r\n      tax: invoice[0].tax,\r\n      selectedFile: invoice[0].selectedFile,\r\n    };\r\n    console.log(invoiceObject);\r\n    await axios\r\n      .post(\"/create-pdf\", invoiceObject)\r\n      .then(() => axios.get(\"/create-pdf/fetch-pdf\", { responseType: \"blob\" }))\r\n      .then((res) => {\r\n        const pdfBlob = new Blob([res.data], { type: \"application/pdf\" });\r\n\r\n        saveAs(pdfBlob, \"newPdf.pdf\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>Name</label>\r\n        <input\r\n          value={data.name}\r\n          onChange={(e) => setData({ ...data, name: e.target.value })}\r\n        />\r\n        <br />\r\n        <label>Description</label>\r\n        <input\r\n          value={data.description}\r\n          onChange={(e) => setData({ ...data, description: e.target.value })}\r\n        />\r\n        <br />\r\n        <label>Hours</label>\r\n        <input\r\n          value={data.hours}\r\n          onChange={(e) => setData({ ...data, hours: e.target.value })}\r\n        />\r\n        <br />\r\n        <label>Quantity</label>\r\n        <input\r\n          value={data.quantity}\r\n          onChange={(e) => setData({ ...data, quantity: e.target.value })}\r\n        />\r\n        <br />\r\n        <label>Tax</label>\r\n        <input\r\n          placeholder=\"%\"\r\n          value={data.tax}\r\n          onChange={(e) => setData({ ...data, tax: e.target.value })}\r\n        />\r\n        <br />\r\n        <label>Payment Terms</label>\r\n        <input\r\n          value={data.paymentTerms}\r\n          onChange={(e) => setData({ ...data, paymentTerms: e.target.value })}\r\n        />\r\n        <br />\r\n        <label>Rate</label>\r\n        <input\r\n          value={data.rate}\r\n          onChange={(e) => setData({ ...data, rate: e.target.value })}\r\n        />{\" \"}\r\n        <br />\r\n        Upload a logo{\" \"}\r\n        <FileBase\r\n          id=\"upload logo\"\r\n          type=\"file\"\r\n          multiple={false}\r\n          onDone={({ base64 }) => setData({ ...data, selectedFile: base64 })}\r\n        />{\" \"}\r\n        <br />\r\n        <button type=\"submit\">Submit Data</button>\r\n        <br />\r\n      </form>\r\n      <button onClick={downloadPDF}>Download PDF</button>\r\n      <div>\r\n        <form>\r\n          <input\r\n            placeholder=\"Enter Invoice Number\"\r\n            value={search.invoiceNumber}\r\n            onChange={(e) => {\r\n              setSearch({ ...search, invoiceNumber: e.target.value });\r\n            }}\r\n          />\r\n          <button onClick={handlePastDue}>Search</button>\r\n        </form>\r\n      </div>\r\n\r\n      <div>\r\n        {searchResultsState\r\n          ? searchResultsState.map((results) => (\r\n            \r\n              <h2 key={results._id}>\r\n                Invoice Number: {results.invoiceNumber} <br />\r\n                Company Name: {results.name}\r\n                <br />\r\n                Description: {results.description}\r\n                <br />\r\n                Hours: {results.hours}\r\n                <br />\r\n                Rate: {results.rate}\r\n                <br />\r\n                Total: {results.total}\r\n                <br />\r\n                Status: {results.pastDue ? \"Past Due!\" : \"Current\"}\r\n              </h2>\r\n            \r\n            ))\r\n          : \"\"}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\varta\\Desktop\\projects\\invoiceBuilderApp\\client\\src\\components\\grids\\Grids.js",[],"C:\\Users\\varta\\Desktop\\projects\\invoiceBuilderApp\\client\\src\\components\\auth\\Login.js",[],"C:\\Users\\varta\\Desktop\\projects\\invoiceBuilderApp\\client\\src\\components\\pages\\Home.js",[],"C:\\Users\\varta\\Desktop\\projects\\invoiceBuilderApp\\client\\src\\components\\auth\\Register.js",["50","51"],"// import Axios from \"axios\";\r\n// import React, { useState, useContext } from \"react\";\r\n// import UserContext from \"../../context/UserContext\";\r\n// import { useHistory } from \"react-router-dom\";\r\n\r\n// export default function Register() {\r\n//   const [email, setEmail] = useState();\r\n//   const [password, setPassword] = useState();\r\n//   const [passwordCheck, setPasswordCheck] = useState();\r\n//   const [displayName, setDisplayName] = useState();\r\n//   const history = useHistory();\r\n//   const { setUserData } = useContext(UserContext);\r\n\r\n//   const submit = async (e) => {\r\n//     e.preventDefault();\r\n//     const newUser = { email, password, passwordCheck, displayName };\r\n\r\n//     await Axios.post(\"http://localhost:3001/users/register\", newUser);\r\n//     const loginRes = await Axios.post(\"http://localhost:3001/users/login\", {\r\n//       email,\r\n//       password,\r\n//     });\r\n//     setUserData({\r\n//       token: loginRes.data.token,\r\n//       user: loginRes.data.user,\r\n//     });\r\n//     localStorage.setItem(\"auth-token\", loginRes.data.token);\r\n//     history.push(\"/\");\r\n//   };\r\n//   return (\r\n//     <div>\r\n//       <h2>Register</h2>\r\n//       <form onSubmit={submit}>\r\n//         <label htmlFor=\"register-email\">Email</label>\r\n//         <input\r\n//           id=\"register-email\"\r\n//           type=\"email\"\r\n//           onChange={(e) => setEmail(e.target.value)}\r\n//         />\r\n\r\n//         <label htmlFor=\"register-password\">Password</label>\r\n//         <input\r\n//           id=\"register-password\"\r\n//           type=\"password\"\r\n//           onChange={(e) => setPassword(e.target.value)}\r\n//         />\r\n//         <input\r\n//           type=\"password\"\r\n//           placeholder=\"Verify-Password\"\r\n//           onChange={(e) => setPasswordCheck(e.target.value)}\r\n//         />\r\n\r\n//         <label htmlFor=\"register-display-name\">Display Name</label>\r\n//         <input\r\n//           id=\"register-display-name\"\r\n//           type=\"text\"\r\n//           onChange={(e) => setDisplayName(e.target.value)}\r\n//         />\r\n\r\n//         <input type=\"submit\" value=\"register\" />\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nimport Axios from \"axios\";\r\nimport React, { useState, useContext } from \"react\";\r\nimport UserContext from \"../../context/UserContext\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Copyright © '}\r\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n        Your Website\r\n      </Link>{' '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  center: {\r\n    justifyContent: \"center\"\r\n  }\r\n}));\r\n\r\nexport default function SignUp() {\r\n  const classes = useStyles();\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  \r\n  const [displayName, setDisplayName] = useState();\r\n  const history = useHistory();\r\n  const { setUserData } = useContext(UserContext);\r\n\r\n  const submit = async (e) => {\r\n    e.preventDefault();\r\n    const newUser = { email, password,  displayName };\r\n\r\n    await Axios.post(\"http://localhost:3001/users/register\", newUser);\r\n    const loginRes = await Axios.post(\"http://localhost:3001/users/login\", {\r\n      email,\r\n      password,\r\n    });\r\n    setUserData({\r\n      token: loginRes.data.token,\r\n      user: loginRes.data.user,\r\n    });\r\n    localStorage.setItem(\"auth-token\", loginRes.data.token);\r\n    localStorage.setItem(\"email\", email);\r\n    history.push(\"/invoice\");\r\n\r\n  };\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign up\r\n        </Typography>\r\n        <form className={classes.form} noValidate onSubmit={submit}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} >\r\n              <TextField\r\n                autoComplete=\"fname\"\r\n                name=\"firstName\"\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"firstName\"\r\n                label=\"User Name\"\r\n                autoFocus\r\n                onChange={(e) => setDisplayName(e.target.value)}\r\n              />\r\n            </Grid>\r\n           \r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              \r\n            </Grid>\r\n          </Grid>\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n          >\r\n            Sign Up\r\n          </Button>\r\n          <Grid container className={classes.center}>\r\n            <Grid item>\r\n              <Link href=\"/login\" variant=\"body2\">\r\n                Already have an account? Sign in\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n      <Box mt={5}>\r\n        <Copyright />\r\n      </Box>\r\n    </Container>\r\n  );\r\n}","C:\\Users\\varta\\Desktop\\projects\\invoiceBuilderApp\\client\\src\\utils\\API.js",[],"C:\\Users\\varta\\Desktop\\projects\\invoiceBuilderApp\\client\\src\\context\\ClickedContext.js",[],{"ruleId":"52","severity":1,"message":"53","line":3,"column":8,"nodeType":"54","messageId":"55","endLine":3,"endColumn":12},{"ruleId":"52","severity":1,"message":"56","line":4,"column":8,"nodeType":"54","messageId":"55","endLine":4,"endColumn":13},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"52","severity":1,"message":"61","line":13,"column":10,"nodeType":"54","messageId":"55","endLine":13,"endColumn":13},{"ruleId":"52","severity":1,"message":"62","line":74,"column":8,"nodeType":"54","messageId":"55","endLine":74,"endColumn":24},{"ruleId":"52","severity":1,"message":"63","line":75,"column":8,"nodeType":"54","messageId":"55","endLine":75,"endColumn":16},"no-unused-vars","'Home' is defined but never used.","Identifier","unusedVar","'Grids' is defined but never used.","no-native-reassign",["64"],"no-negated-in-lhs",["65"],"'set' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","no-global-assign","no-unsafe-negation"]